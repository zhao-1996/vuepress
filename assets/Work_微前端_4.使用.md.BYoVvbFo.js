import{_ as a,c as r,o as e,a3 as o}from"./chunks/framework.BvVpiGod.js";const h=JSON.parse('{"title":"micro-app使用","description":"","frontmatter":{},"headers":[],"relativePath":"Work/微前端/4.使用.md","filePath":"Work/微前端/4.使用.md","lastUpdated":1655803752000}'),t={name:"Work/微前端/4.使用.md"},p=o('<h1 id="micro-app使用" tabindex="-1">micro-app使用 <a class="header-anchor" href="#micro-app使用" aria-label="Permalink to &quot;micro-app使用&quot;">​</a></h1><p>使用教程<a href="https://cangdu.org/micro-app/docs.html#/" target="_blank" rel="noreferrer">官方文档</a></p><h4 id="踩坑" tabindex="-1">踩坑 <a class="header-anchor" href="#踩坑" aria-label="Permalink to &quot;踩坑&quot;">​</a></h4><p>一、子应用接口代理要在基站进行架设，原因详见客户端渲染(最为有效的方法是架设nginx代理)<br> 二、子应用外部资源加载被跨域限制(最为有效的方法是架设nginx代理)<br> 三、非组件化方式编译的插件<br> 四、子应用顶级元素不可以使用绝对定位，否则基站元素隔离失效，因为基站元素并未设置相对定位<br> 五、基站元素并未设置任何背景色，需子元素自己调试，否则样式会很难看。<br> 六、路由传值不可再用query，建议用localStorage。<br> 七、子系统的样式会有差异，建议统一在基座平台解决。<br> 八、micro-app数据通信，是在子应用加载完成后开开始的，可以使用页面更新api，但建议使用localStorage,或者使用nextTick在App.vue里进行全局派发<br> 九、在基座加载的子应用，不要使用全局实例，例如Vue<br> 十、使用dialog不要插到body上，特别是根据接口响应弹出的（例如element-ui组件的el-dialog，可以配置属性:modal-append-to-body=&quot;false&quot;）<br> 十一、Popover组件错位，建议用原生js事件对象进行位置矫正<br> 十二、全局message提示失效，原因在于列表数据加载的loading也是全局的，此时异步调用提示才会不被覆盖<br></p><h4 id="建议" tabindex="-1">建议 <a class="header-anchor" href="#建议" aria-label="Permalink to &quot;建议&quot;">​</a></h4><p>一、micro-app作为基座，本身具有父级维度，如果子应用将实例进行全局化，会破坏micro-app作为父级的作用，所有尽量将子应用功能模块全局化，例如不在子应用全局使用Vue实例，例如dialog插到父级元素上而不是插到body上。以此类推。<br> 二、如果是加载的外部脚本，建议在基座进行加载，这样还可以避免跨域问题（micro-app提供全局使用属性）。<br> 三、若使用Popover组件，最好已知内容长度，不知内容长度的，建议不使用Popover组件或者对内容进行切割。<br></p>',6),i=[p];function c(n,l,d,s,_,m){return e(),r("div",null,i)}const u=a(t,[["render",c]]);export{h as __pageData,u as default};
