import{_ as s,c as a,o as t,a3 as i}from"./chunks/framework.BvVpiGod.js";const e="/vuepress/assets/nginx61.CdjsRMyT.jpeg",E=JSON.parse('{"title":"反向负载均衡的原理","description":"","frontmatter":{},"headers":[],"relativePath":"tool/nginx/6.负载均衡的原理.md","filePath":"tool/nginx/6.负载均衡的原理.md","lastUpdated":1716973501000}'),n={name:"tool/nginx/6.负载均衡的原理.md"},p=i(`<h1 id="反向负载均衡的原理" tabindex="-1">反向负载均衡的原理 <a class="header-anchor" href="#反向负载均衡的原理" aria-label="Permalink to &quot;反向负载均衡的原理&quot;">​</a></h1><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">系统的扩展可分为纵向（垂直）扩展和横向（水平）扩展。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">纵向扩展，是从单机的角度通过增加硬件处理能力，比如CPU处理能力，内存容量，磁盘等方面，实现服务器处理能力的提升，不能满足大型分布式系统（网站），大流量，高并发，海量数据的问题。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">因此需要采用横向扩展的方式，通过添加机器来满足大型网站服务的处理能力。比如：一台机器不能满足，则增加两台或者多台机器，共同承担访问压力。这就是典型的集群和负载均衡架构：如下图：</span></span></code></pre></div><p><img src="`+e+`" alt="RUNOOB 图标"></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">应用集群：将同一应用部署到多台机器上，组成处理集群，接收负载均衡设备分发的请求，进行处理，并返回相应数据。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">负载均衡设备：将用户访问的请求，根据负载均衡算法，分发到集群中的一台处理服务器。（一种把网络请求分散到一个服务器集群中的可用服务器上去的设备）</span></span></code></pre></div>`,4),l=[p];function o(c,d,r,h,_,g){return t(),a("div",null,l)}const u=s(n,[["render",o]]);export{E as __pageData,u as default};
