import{_ as a,c as s,o as e,a3 as i}from"./chunks/framework.BvVpiGod.js";const f=JSON.parse('{"title":"响应式工具","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue3/组合式API/2.响应式工具.md","filePath":"vue/vue3/组合式API/2.响应式工具.md","lastUpdated":1717375889000}'),t={name:"vue/vue3/组合式API/2.响应式工具.md"},n=i(`<h1 id="响应式工具" tabindex="-1">响应式工具 <a class="header-anchor" href="#响应式工具" aria-label="Permalink to &quot;响应式工具&quot;">​</a></h1><h5 id="isref" tabindex="-1">isRef <a class="header-anchor" href="#isref" aria-label="Permalink to &quot;isRef&quot;">​</a></h5><p>检查某个值是否为 ref。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // foo 的类型被收窄为了 Ref&lt;unknown&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  foo.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="torefs" tabindex="-1">toRefs() <a class="header-anchor" href="#torefs" aria-label="Permalink to &quot;toRefs()&quot;">​</a></h4><p>将一个响应式对象转换为一个普通对象，这个普通对象的每个属性都是指向源对象相应属性的 ref。每个单独的 ref 都是使用 toRef() 创建的。</p><h4 id="isproxy" tabindex="-1">isProxy() <a class="header-anchor" href="#isproxy" aria-label="Permalink to &quot;isProxy()&quot;">​</a></h4><p>检查一个对象是否是由 reactive()、readonly()、shallowReactive() 或 shallowReadonly() 创建的代理。</p><h4 id="isreactive" tabindex="-1">isReactive() <a class="header-anchor" href="#isreactive" aria-label="Permalink to &quot;isReactive()&quot;">​</a></h4><p>检查一个对象是否是由 reactive() 或 shallowReactive() 创建的代理</p><h4 id="isreadonly" tabindex="-1">isReadonly() <a class="header-anchor" href="#isreadonly" aria-label="Permalink to &quot;isReadonly()&quot;">​</a></h4><p>检查传入的值是否为只读对象。只读对象的属性可以更改，但他们不能通过传入的对象直接赋值。</p>`,12),l=[n];function r(o,h,p,d,c,k){return e(),s("div",null,l)}const u=a(t,[["render",r]]);export{f as __pageData,u as default};
