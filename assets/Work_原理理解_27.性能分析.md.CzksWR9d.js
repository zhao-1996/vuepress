import{_ as r,c as a,o as e,a3 as n}from"./chunks/framework.BvVpiGod.js";const t="/vuepress/assets/xingneng1.C_TF1Hxx.png",g=JSON.parse('{"title":"性能分析","description":"","frontmatter":{},"headers":[],"relativePath":"Work/原理理解/27.性能分析.md","filePath":"Work/原理理解/27.性能分析.md","lastUpdated":1716962640000}'),s={name:"Work/原理理解/27.性能分析.md"},i=n('<h1 id="性能分析" tabindex="-1">性能分析 <a class="header-anchor" href="#性能分析" aria-label="Permalink to &quot;性能分析&quot;">​</a></h1><p>一般来说，页面资源的性能消耗包括加载和执行。在加载方面，各类资源基本是平等的，主要与资源大小和网络有关。<br> 在执行方面，差异就非常大，比如，<br> （1）图片的解码和渲染，可能在十毫秒级就处理完了；<br> （2）CSS解析，样式重计算，排版，估计在百毫秒级也可以处理完；<br> （3）而JS的Parse／Compile + JS Execution，可能好几秒才能完成。<br> 一组基准测试的数据，<br><img src="'+t+'" alt="1"><br> JS解析是JS性能消耗的主要部分<br> Nexus5手机上，生成100K的字节码需要消耗100-200ms的JS解析时间（好的手机可能快一点，还有网络）。<br> 面的平均JS大小在不断增长，目前消耗在JS解析的时间已经非常惊人，全网平均时间会超过500ms。<br> 现在基本每个页面都会引入一套前端框架，Angular，React，Vue 的大小情况如下<br> 1）angular2 gzip大小111K，原始大小566K<br> 111K Jan 4 22:11 angular2.min.js.gz<br> 566K Jan 4 22:03 angular2.min.js<br> （2）angular.1.4.5 gzip大小51K，原始大小143K<br> 51K Jan 4 22:11 angular.1.4.5.min.js.gz<br> 143K Jan 4 21:46 angular.1.4.5.min.js<br> （3）react-0.14.5 gzip大小39K，原始大小132K<br> 39K Jan 4 22:11 react-0.14.5.min.js.gz<br> 132K Jan 4 21:56 react-0.14.5.min.js<br> （4）vue-2.0.3 gzip大小23K，原始大小63K<br> 23K Oct 13 03:02 vue-2.0.3.min.js.gz<br> 63K Oct 13 03:02 vue-2.0.3.min.js<br> 如果再加上一系列的依赖库会更大<br> 良好的性能还需要框架和业务JS代码写得非常好。但是，如果JS框架文件非常大，JS解析的时间就决定了它的性能不会很好。<br> 2016年之后，Chrome V8团队引入了新的解析器Ignition，使用解析器+编译器的架构（Ignition + TurboFan），并于Chrome 59版本默认打开，新的架构带来的收益非常明显，JS占用的内存大幅下降而实际页面的性能大幅提升。所以谷歌浏览器优于其他浏览器，市场份额遥遥领先。<br> 在前端渲染非常流行的今天，页面的大部分逻辑都会通过JS去实现，复杂的业务逻辑让完全从头开始写一套JS代码变得几乎不可能，越来越多的JS框架被引进各类页面，页面的JS正变得越来越大。我们必须清醒的认识到，每100K的JS源代码可能意味着在中低端机器上100-200ms的性能损耗。<br> 在JS性能方面，我们给的建议是，<br> （1）降低页面JS的大小，包括依赖库的JS大小，减少不必要的依赖。<br> （2）基于Vue，React，Angular，等JS框架的核心库去进行开发，不要一股脑引入一大堆依赖库。<br> （3）拆分首屏与非首屏逻辑，让执行耗时的JS尽可能在首屏之后执行。<br> （4）关注JS引擎的升级，JS引擎也在持续优化。<br></p>',2),o=[i];function _(b,c,J,S,m,l){return e(),a("div",null,o)}const p=r(s,[["render",_]]);export{g as __pageData,p as default};
