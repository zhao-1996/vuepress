import{_ as s,c as a,o as i,a3 as n}from"./chunks/framework.aC9gkKXW.js";const g=JSON.parse('{"title":"基础篇一","description":"","frontmatter":{},"headers":[],"relativePath":"tool/webpack/Base1.md","filePath":"tool/webpack/Base1.md","lastUpdated":1716973501000}'),l={name:"tool/webpack/Base1.md"},h=n(`<h1 id="基础篇一" tabindex="-1">基础篇一 <a class="header-anchor" href="#基础篇一" aria-label="Permalink to &quot;基础篇一&quot;">​</a></h1><h3 id="_1-webpack-是什么" tabindex="-1">1.webpack 是什么？ <a class="header-anchor" href="#_1-webpack-是什么" aria-label="Permalink to &quot;1.webpack 是什么？&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webpack 是一个现代 JavaScript 应用程序的静态模块打包器，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">当 webpack 处理应用程序时，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">会递归构建一个依赖关系图，其中包含应用程序需要的每个模块，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">然后将这些模块打包成一个或多个 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(束),类似一束花,每根</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">花茎都是一个模块.</span></span></code></pre></div><h3 id="_2-webpack-的核心概念" tabindex="-1">2.webpack 的核心概念 <a class="header-anchor" href="#_2-webpack-的核心概念" aria-label="Permalink to &quot;2.webpack 的核心概念&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">入口</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(在转换的路上)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">output</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">输出</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(已经转换好)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 模块转换器，用于把模块原内容按照需求转换成新内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">插件</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(plugins): 扩展插件，在webpack构建流程中的特定时机注</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">入扩展逻辑来改变构建结果或做你想要做的事情</span></span></code></pre></div><h3 id="_4-将js转义为低版本" tabindex="-1">4.将JS转义为低版本 <a class="header-anchor" href="#_4-将js转义为低版本" aria-label="Permalink to &quot;4.将JS转义为低版本&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webpack 的四个核心概念，其中之一就是 loader，loader </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">用于对源代码进行转换，这正是我们现在所需要的。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">将JS代码向低版本转换，我们需要使用 babel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader</span></span></code></pre></div><h3 id="_8-如何处理样式文件呢" tabindex="-1">8.如何处理样式文件呢 <a class="header-anchor" href="#_8-如何处理样式文件呢" aria-label="Permalink to &quot;8.如何处理样式文件呢&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webpack 不能直接处理 css，需要借助 loader。如果是 .css，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">我们需要的 loader 通常有： style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader、css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">考虑到兼容性问题，还需要 postcss</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader，而如果是 less </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">或者是 sass 的话，还需要 less</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader 和 sass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">这里配置一下 less 和 css </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">文件</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sass 的话，使用 sass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader即可.</span></span></code></pre></div><h3 id="_9-图片-字体文件处理" tabindex="-1">9.图片/字体文件处理 <a class="header-anchor" href="#_9-图片-字体文件处理" aria-label="Permalink to &quot;9.图片/字体文件处理&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">我们可以使用 url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader 或者 file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader 来处理本地</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">的资源文件。url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader 和 file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader 的功能类似，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">但是 url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader 可以指定在文件大小小于指定的限制时，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">返回 DataURL，因此，个人会优先选择使用 url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader。</span></span></code></pre></div><h3 id="_10-处理-html-中的本地图片" tabindex="-1">10.处理 html 中的本地图片 <a class="header-anchor" href="#_10-处理-html-中的本地图片" aria-label="Permalink to &quot;10.处理 html 中的本地图片&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">安装 html</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">withimg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loader 来解决</span></span></code></pre></div><h3 id="_11-入口配置" tabindex="-1">11.入口配置 <a class="header-anchor" href="#_11-入口配置" aria-label="Permalink to &quot;11.入口配置&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">入口的字段为</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: entry</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //webpack的默认配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">entry 的值可以是一个字符串，一个数组或是一个对象。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">字符串的情况无需多说，就是以对应的文件为入口。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">为数组时，表示有“多个主入口”，想要多个依赖文件一起</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">注入时，会这样配置。</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">例如</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;./src/polyfills.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;./src/index.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">polyfills.js 文件中可能只是简单的引入了一些 polyfill，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例如 babel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">polyfill，whatwg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fetch 等，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">需要在最前面被引入</span></span></code></pre></div>`,15),p=[h];function t(e,k,E,r,d,c){return i(),a("div",null,p)}const y=s(l,[["render",t]]);export{g as __pageData,y as default};
