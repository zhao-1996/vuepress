import{_ as e,c as a,o as t,a3 as n}from"./chunks/framework.BvVpiGod.js";const f=JSON.parse('{"title":"缓存","description":"","frontmatter":{},"headers":[],"relativePath":"tool/依赖管理/5.缓存.md","filePath":"tool/依赖管理/5.缓存.md","lastUpdated":1653487219000}'),o={name:"tool/依赖管理/5.缓存.md"},i=n('<h1 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-label="Permalink to &quot;缓存&quot;">​</a></h1><p>在执行 npm install 或 npm update命令下载依赖后，除了将依赖包安装在node_modules 目录下外，还会在本地的缓存目录缓存一份。 通过 npm config get cache 命令可以查询到：在 Linux 或 Mac 默认是用户主目录下的 .npm/_cacache 目录。 在这个目录下又存在两个目录：content-v2、index-v5，content-v2 目录用于存储 tar包的缓存，而index-v5目录用于存储tar包的 hash。 npm 在执行安装时，可以根据 package-lock.json 中存储的 integrity、version、name 生成一个唯一的 key 对应到 index-v5 目录下的缓存记录，从而找到 tar包的 hash，然后根据 hash 再去找缓存的 tar包直接使用。</p><p>npm 提供了几个命令来管理缓存数据：</p><ul><li>npm cache add：官方解释说这个命令主要是 npm 内部使用，但是也可以用来手动给一个指定的 package 添加缓存。</li><li>npm cache clean：删除缓存目录下的所有数据，为了保证缓存数据的完整性，需要加上 --force 参数。</li><li>npm cache verify：验证缓存数据的有效性和完整性，清理垃圾数据。</li></ul><p>基于缓存数据，npm 提供了离线安装模式，分别有以下几种：</p><ul><li>--prefer-offline：优先使用缓存数据，如果没有匹配的缓存数据，则从远程仓库下载。</li><li>--prefer-online：优先使用网络数据，如果网络数据请求失败，再去请求缓存数据，这种模式可以及时获取最新的模块。</li><li>--offline：不请求网络，直接使用缓存数据，一旦缓存数据不存在，则安装失败。</li></ul>',6),c=[i];function l(r,p,_,s,d,m){return t(),a("div",null,c)}const u=e(o,[["render",l]]);export{f as __pageData,u as default};
