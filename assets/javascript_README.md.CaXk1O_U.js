import{_ as a,c as r,o as t,a3 as e}from"./chunks/framework.aC9gkKXW.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/README.md","filePath":"javascript/README.md","lastUpdated":1635116604000}'),c={name:"javascript/README.md"},p=e('<p>JavaScript 是一种轻量级的脚本语言。<br> 所谓“脚本语言”（script language），指的是它不具备开发操作系统的能力， 而是只用来编写控制其他大型应用程序（比如浏览器）的“脚本”。 <br> JavaScript 是一种嵌入式（embedded）语言。它本身提供的核心语法不算很多，只能用来做一些数学和逻辑运算。<br> JavaScript 本身不提供任何与 I/O（输入/输出）相关的 API，都要靠宿主环境（host）提供，所以 JavaScript 只合适嵌入应用程序环境，去调用宿主环境提供的底层 API。<br> 目前，已经嵌入 JavaScript 的宿主环境有多种，最常见的环境就是浏览器，另外还有服务器环境，也就是 Node 项目。<br> 从语法角度看，JavaScript 语言是一种“对象模型”语言。各种宿主环境通过这个模型，描述自己的功能和操作接口， 从而通过 JavaScript 控制这些功能。但是，JavaScript 并不是纯粹的“面向对象语言”， 还支持其他编程范式（比如函数式编程）。这导致几乎任何一个问题，JavaScript 都有多种解决方法。<br> JavaScript 的核心语法部分相当精简，只包括两个部分：基本的语法构造（比如操作符、控制结构、语句） 和标准库（就是一系列具有各种功能的对象比如Array、Date、Math等）。 除此之外，各种宿主环境提供额外的 API（即只能在该环境使用的接口），以便 JavaScript 调用。<br> 以浏览器为例，它提供的额外 API 可以分成三大类。<br> 浏览器控制类：操作浏览器（比如打开浏览器，回退路由）<br> DOM 类：操作网页的各种元素<br> Web 类：实现互联网的各种功能（比如地图，文件下载）<br> 如果宿主环境是服务器，则会提供各种操作系统的 API，比如文件操作 API、网络通信 API等等。这些你都可以在 Node 环境中找到。</p><p>MDN中文文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noreferrer">请点击</a><br> 阮一峰JavaScript教程：<a href="https://wangdoc.com/javascript/index.html" target="_blank" rel="noreferrer">请点击</a><br> ES6: <a href="https://es6.ruanyifeng.com/" target="_blank" rel="noreferrer">请点击</a></p>',2),o=[p];function i(s,_,n,d,l,v){return t(),r("div",null,o)}const h=a(c,[["render",i]]);export{S as __pageData,h as default};
