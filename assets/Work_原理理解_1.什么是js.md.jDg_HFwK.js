import{_ as a,c as r,o as t,a3 as c}from"./chunks/framework.BvVpiGod.js";const C=JSON.parse('{"title":"JavaScript历史","description":"","frontmatter":{},"headers":[],"relativePath":"Work/原理理解/1.什么是js.md","filePath":"Work/原理理解/1.什么是js.md","lastUpdated":1652184936000}'),i={name:"Work/原理理解/1.什么是js.md"},p=c('<h1 id="javascript历史" tabindex="-1">JavaScript历史 <a class="header-anchor" href="#javascript历史" aria-label="Permalink to &quot;JavaScript历史&quot;">​</a></h1><h4 id="一、什么是-javascript-语言" tabindex="-1">一、什么是 JavaScript 语言 <a class="header-anchor" href="#一、什么是-javascript-语言" aria-label="Permalink to &quot;一、什么是 JavaScript 语言&quot;">​</a></h4><p>JavaScript 是一种轻量级的脚本语言。所谓“脚本语言”（script language），指的是它不具备开发操作系统的能力，<br> 而是只用来编写控制其他大型应用程序（比如浏览器）的“脚本”。<br> JavaScript 也是一种嵌入式（embedded）语言。它本身提供的核心语法不算很多，只能用来做一些数学和逻辑运算。<br> JavaScript 本身不提供任何与 I/O（输入/输出）相关的 API，都要靠宿主环境（host）提供，所以 JavaScript <br> 只合适嵌入更大型的应用程序环境，去调用宿主环境提供的底层 API。<br> 目前，已经嵌入 JavaScript 的宿主环境有多种，最常见的环境就是浏览器，另外还有服务器环境，也就是 Node 项目。<br> 从语法角度看，JavaScript 语言是一种“对象模型”语言。各种宿主环境通过这个模型，描述自己的功能和操作接口，<br> 从而通过 JavaScript 控制这些功能。但是，JavaScript 并不是纯粹的“面向对象语言”，<br> 还支持其他编程范式（比如函数式编程）。这导致几乎任何一个问题，JavaScript 都有多种解决方法。<br> JavaScript 的核心语法部分相当精简，只包括两个部分：基本的语法构造（比如操作符、控制结构、语句）<br> 和标准库（就是一系列具有各种功能的对象比如Array、Date、Math等）。<br> 除此之外，各种宿主环境提供额外的 API（即只能在该环境使用的接口），以便 JavaScript 调用。<br> 以浏览器为例，它提供的额外 API 可以分成三大类。<br> 浏览器控制类：操作浏览器<br> DOM 类：操作网页的各种元素<br> Web 类：实现互联网的各种功能<br> 如果宿主环境是服务器，则会提供各种操作系统的 API，比如文件操作 API、网络通信 API等等。这些你都可以在 Node 环境中找到。<br></p><h4 id="二、javascript的诞生" tabindex="-1">二、JavaScript的诞生 <a class="header-anchor" href="#二、javascript的诞生" aria-label="Permalink to &quot;二、JavaScript的诞生&quot;">​</a></h4><p>1995年5月，Brendan Eich 只用了10天，就设计完成了这种语言的第一版。<br> 为了保持简单，这种脚本语言缺少一些关键的功能，比如块级作用域、模块、子类型（subtyping）等等，<br> 但是可以利用现有功能找出解决办法。这种功能的不足，直接导致了后来 JavaScript 的一个显著特点：<br> 对于其他语言，你需要学习语言的各种功能，而对于 JavaScript，你常常需要学习各种解决问题的模式。<br> 而且由于来源多样，从一开始就注定，JavaScript 的编程风格是函数式编程和面向对象编程的一种混合体。<br> Netscape 公司的这种浏览器脚本语言，最初名字叫做 Mocha，1995年9月改为 LiveScript。12月，<br> Netscape 公司与 Sun 公司（Java 语言的发明者和所有者）达成协议，后者允许将这种语言叫做 JavaScript；</p><h4 id="三、javascript-与-ecmascript-的关系" tabindex="-1">三、JavaScript 与 ECMAScript 的关系 <a class="header-anchor" href="#三、javascript-与-ecmascript-的关系" aria-label="Permalink to &quot;三、JavaScript 与 ECMAScript 的关系&quot;">​</a></h4><p>1996年8月，微软模仿 JavaScript 开发了一种相近的语言，取名为JScript，首先内置于IE 3.0。<br> 1996年11月，Netscape 公司决定将 JavaScript 提交给国际标准化组织 ECMA，希望 JavaScript 能够成为国际标准，以此抵抗微软。<br> ECMA 的39号技术委员会负责制定和审核这个标准，<br> 1997年7月，ECMA 组织发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，<br> 并将这种语言称为 ECMAScript。这个版本就是 ECMAScript 1.0 版。之所以不叫 JavaScript，<br> 一方面是由于商标的关系，Java 是 Sun 公司的商标，根据一份授权协议，只有 Netscape 公司可以合法<br> 地使用 JavaScript 这个名字，且 JavaScript 已经被 Netscape 公司注册为商标，另一方面也是想体<br> 现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。<br> 因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。<br> ECMAScript 只用来标准化 JavaScript 这种语言的基本语法结构。可以说，ECMAScript版本就是JavaScript版本</p><h4 id="四、javascript-的版本" tabindex="-1">四、JavaScript 的版本 <a class="header-anchor" href="#四、javascript-的版本" aria-label="Permalink to &quot;四、JavaScript 的版本&quot;">​</a></h4><p>1997年7月，ECMAScript 1.0发布。<br> 1998年6月，ECMAScript 2.0版发布。<br> 1999年12月，ECMAScript 3.0版发布，成为 JavaScript 的通行标准，得到了广泛支持。<br> 2008年7月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激进，<br> ECMA 开会决定，中止 ECMAScript 4.0 的开发（即废除了这个版本），将其中涉及现有<br> 功能改善的一小部分，发布为 ECMAScript 3.1，而将其他激进的设想扩大范围，放入以后的版本，<br> 由于会议的气氛，该版本的项目代号起名为 Harmony（和谐）。会后不久，ECMAScript 3.1 就改名为 ECMAScript 5。<br> 009年12月，ECMAScript 5.0版 正式发布。Harmony 项目则一分为二，一些较为可行的设想定名为<br> JavaScript.next 继续开发，后来演变成 ECMAScript 6；一些不是很成熟的设想，则被视<br> 为 JavaScript.next.next，在更远的将来再考虑推出。TC39 的总体考虑是，ECMAScript 5 与 ECMAScript 3 基本<br> 保持兼容，较大的语法修正和新功能加入，将由 JavaScript.next 完成。当时，JavaScript.next 指的是ECMAScript 6。<br> 第六版发布以后，将指 ECMAScript 7。TC39 预计，ECMAScript 5 会在2013年的年中成为 JavaScript 开发的主流标准，<br> 并在此后五年中一直保持这个位置。<br> 2011年6月，ECMAScript 5.1版发布，并且成为 ISO 国际标准（ISO/IEC 16262:2011）。到了2012年底，<br> 所有主要浏览器都支持 ECMAScript 5.1版的全部功能<br> 2013年3月，ECMAScript 6 草案冻结，不再添加新功能。新的功能设想将被放到 ECMAScript 7。<br> 2013年12月，ECMAScript 6 草案发布。然后是12个月的讨论期，听取各方反馈。<br> 2015年6月，ECMAScript 6 正式发布，并且更名为“ECMAScript 2015”。<br> 这是因为 TC39 委员会计划，以后每年发布一个 ECMAScript 的版本，下一个版本在2016年发布，<br> 称为“ECMAScript 2016”，2017年发布“ECMAScript 2017”，以此类推。<br></p>',9),e=[p];function S(b,s,v,o,A,n){return t(),r("div",null,e)}const E=a(i,[["render",S]]);export{C as __pageData,E as default};
