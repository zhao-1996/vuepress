import{_ as a,c as r,o as e,a3 as t}from"./chunks/framework.aC9gkKXW.js";const u=JSON.parse('{"title":"微服务","description":"","frontmatter":{},"headers":[],"relativePath":"Work/微前端/5.微服务.md","filePath":"Work/微前端/5.微服务.md","lastUpdated":1676594664000}'),o={name:"Work/微前端/5.微服务.md"},i=t('<h1 id="微服务" tabindex="-1">微服务 <a class="header-anchor" href="#微服务" aria-label="Permalink to &quot;微服务&quot;">​</a></h1><p>微服务（microservice）是一种软件架构理念。</p><h3 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h3><h4 id="单体架构" tabindex="-1">单体架构 <a class="header-anchor" href="#单体架构" aria-label="Permalink to &quot;单体架构&quot;">​</a></h4><p>早期的软件，所有功能都写在一起，这称为单体架构<br> 整个软件就是单一的整体，彷佛一体化的机器。<br> 可以想到，软件的功能越多，单体架构就会越复杂，很多缺点也随之暴露出来。<br> （1）所有功能耦合在一起，互相影响，最终难以管理。<br> （2）哪怕只修改一行代码，整个软件就要重新构建和部署，成本非常高。<br> （3）因为软件做成了一个整体，不可能每个功能单独开发和测试，只能整体开发和测试，导致必须采用瀑布式开发模型。<br> 单体架构的大型软件，不仅开发速度慢，而且会形成难以维护和升级的复杂代码，成为程序员的沉重负担。</p><h4 id="面向服务加构" tabindex="-1">面向服务加构 <a class="header-anchor" href="#面向服务加构" aria-label="Permalink to &quot;面向服务加构&quot;">​</a></h4><p>为了解决上面这些问题，很早就有人提出来，必须打破代码的耦合，拆分单体架构，将软件拆分成一个个独立的功能单元。<br> 大概在20多年前，随着互联网的出现，功能单元可以用远程“服务”的形式提供，就诞生出了“面向服务架构”（service-oriented architecture，简称 SOA）。<br> “面向服务架构”就是把一个大型的单体程序，拆分成一个个独立服务，也就是较小的程序。每个服务都是一个独立的功能单元，承担不同的功能，服务之间通过通信协议连在一起。<br> （1）每种服务功能单一，相当于一个小型软件，便于开发和测试。<br> （2）各个服务独立运行，简化了架构，提高了可靠性。<br> （3）鼓励和支持代码重用，同一个服务可以用于多种目的。<br> （4）不同服务可以单独开发和部署，便于升级。<br> （5）扩展性好，可以容易地加机器、加功能，承受高负载。<br> （6）不容易出现单点故障。即使一个服务失败了，不会影响到其他服务。</p><p>面向服务架构是语言不敏感的，不同服务可以使用不同的语言和工具开发，可能需要部署在不同的系统和环境。<br> 这意味着，面向服务架构默认运行在不同服务器上，每台服务器提供一种服务，多台服务器共同组成一个完整的网络应用。</p><h3 id="微服务-1" tabindex="-1">微服务 <a class="header-anchor" href="#微服务-1" aria-label="Permalink to &quot;微服务&quot;">​</a></h3><p>2014年，Docker出现了，彻底改变了软件开发的面貌。它让程序运行在容器中，每个容器可以分别设定运行环境，并且只占用很少的系统资源。<br> 显而易见，可以用容器来实现“面向服务架构”，每个服务不再占用一台服务器，而是占用一个容器。 这样就不需要多台服务器了，最简单的情况下，本机运行多个容器，只用一台服务器就实现了面向服务架构，，这在以前是做不到的。这种实现方式就叫做微服务。<br> 简单说，微服务就是采用容器技术的面向服务架构。它依然使用“服务”作为功能单元，但是变成了轻量级实现，不需要新增服务器，只需要新建容器（一个进程），所以才叫做“微服务”。<br> 一个微服务就是一个独立的进程。 这个进程可以运行在本机，也可以运行在别的服务器，或者在云端<br> 它的特点与面向服务架构是一样的，但因为更轻量级，所以功能的解耦和服务化可以做得更彻底。而且，它可以标准化，同样的容器不管在哪里运行，结果都是一样的，所以市场上有很多 SaaS 产品，提供标准化的微服务。</p><h3 id="k8s" tabindex="-1">K8S <a class="header-anchor" href="#k8s" aria-label="Permalink to &quot;K8S&quot;">​</a></h3>',11),s=[i];function c(h,n,d,l,_,b){return e(),r("div",null,s)}const m=a(o,[["render",c]]);export{u as __pageData,m as default};
