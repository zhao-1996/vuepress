import{_ as a,c as t,o as r,a3 as e}from"./chunks/framework.BvVpiGod.js";const y=JSON.parse('{"title":"概念","description":"","frontmatter":{},"headers":[],"relativePath":"Work/typescript/1.概念.md","filePath":"Work/typescript/1.概念.md","lastUpdated":1697016255000}'),p={name:"Work/typescript/1.概念.md"},i=e('<h1 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h1><p>什么是 TypeScript？TypeScript是添加了类型系统的 JavaScript，适用于任何规模的项目。<br> JavaScript 是一门非常灵活的编程语言：<br></p><ul><li>它没有类型约束，一个变量可能初始化时是字符串，过一会儿又被赋值为数字。</li><li>由于隐式类型转换的存在，有的变量的类型很难在运行前就确定。</li><li>基于原型的面向对象编程，使得原型上的属性或方法可以在运行时被修改。</li><li>函数是 JavaScript 中的一等公民[2]，可以赋值给变量，也可以当作参数或返回值。<br></li></ul><p>这种灵活性就像一把双刃剑，一方面使得 JavaScript 蓬勃发展，无所不能，从 2013 年开始就一直蝉联最普遍使用的编程语言排行榜冠军[3]；另一方面也使得它的代码质量参差不齐，维护成本高，运行时错误多。<br> 而 TypeScript 的类型系统，在很大程度上弥补了 JavaScript 的缺点。</p><h5 id="typescript-是静态类型" tabindex="-1">TypeScript 是静态类型 <a class="header-anchor" href="#typescript-是静态类型" aria-label="Permalink to &quot;TypeScript 是静态类型&quot;">​</a></h5><p>类型系统按照「类型检查的时机」来分类，可以分为动态类型和静态类型。<br> 动态类型是指在运行时才会进行类型检查，这种语言的类型错误往往会导致运行时错误。JavaScript 是一门解释型语言[4]，没有编译阶段，所以它是动态类型<br> TypeScript 在运行前需要先编译为 JavaScript，而在编译阶段就会进行类型检查，所以 TypeScript 是静态类型<br></p><h5 id="typescript-是弱类型" tabindex="-1">TypeScript 是弱类型 <a class="header-anchor" href="#typescript-是弱类型" aria-label="Permalink to &quot;TypeScript 是弱类型&quot;">​</a></h5><p>类型系统按照「是否允许隐式类型转换」来分类，可以分为强类型和弱类型。<br> TypeScript 是完全兼容 JavaScript 的，它不会修改 JavaScript 运行时的特性，所以它们都是弱类型。</p><h5 id="适用于任何规模" tabindex="-1">适用于任何规模 <a class="header-anchor" href="#适用于任何规模" aria-label="Permalink to &quot;适用于任何规模&quot;">​</a></h5><p>TypeScript 非常适用于大型项目——这是显而易见的，类型系统可以为大型项目带来更高的可维护性，以及更少的 bug。<br> 在中小型项目中推行 TypeScript 的最大障碍就是认为使用 TypeScript 需要写额外的代码，降低开发效率。但事实上，由于有 <code>类型推论</code>，大部分类型都不需要手动声明了。</p><h5 id="与标准同步发展" tabindex="-1">与标准同步发展 <a class="header-anchor" href="#与标准同步发展" aria-label="Permalink to &quot;与标准同步发展&quot;">​</a></h5><p>TypeScript 与标准同步发展，符合最新的 ECMAScript 标准</p>',12),c=[i];function o(l,s,n,d,h,_){return r(),t("div",null,c)}const b=a(p,[["render",o]]);export{y as __pageData,b as default};
