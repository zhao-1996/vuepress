import{_ as i,c as s,o as a,a3 as t}from"./chunks/framework.BvVpiGod.js";const g=JSON.parse('{"title":"用户界面","description":"","frontmatter":{},"headers":[],"relativePath":"css/css属性/12.用户界面.md","filePath":"css/css属性/12.用户界面.md","lastUpdated":1653831252000}'),l={name:"css/css属性/12.用户界面.md"},e=t(`<h1 id="用户界面" tabindex="-1">用户界面 <a class="header-anchor" href="#用户界面" aria-label="Permalink to &quot;用户界面&quot;">​</a></h1><p>在 CSS3 中, 增加了一些新的用户界面特性来调整元素尺寸，框尺寸和外边框。</p><ul><li><code>resize</code>：指定一个元素是否是由用户调整大小 <ul><li>none 用户无法调整元素的尺寸。</li><li>both 用户可调整元素的高度和宽度。</li><li>horizontal 用户可调整元素的宽度。</li><li>vertical 用户可调整元素的高度。</li></ul></li><li><code>box-sizing</code>：属性定义如何计算一个元素的总宽度和总高度，主要设置是否需要加上内边距(padding)和边框等。例如，假如您需要并排放置两个带边框的框，可通过将box-sizing 设置为 &quot;border-box&quot;。这样就可以让浏览器呈现出带有指定宽度和高度的框，并把边框和内边距放入框中。 <ul><li><code>content-box</code>： 默认值。如果你设置一个元素的宽为 100px，那么这个元素的内容区会有 100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。</li><li><code>border-box</code>： 告诉浏览器：你想要设置的边框和内边距的值是包含在 width 内的。也就是说，如果你将一个元素的 width 设为 100px，那么这 100px 会包含它的 border 和 padding，内容区的实际宽度是 width 减 去(border + padding) 的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。 注：border-box 不包含 margin。</li><li><code>inherit</code>： 指定 box-sizing 属性的值，应该从父元素继承</li></ul></li><li><code>outline-offset</code>：指定外边框边缘的轮廓 <ul><li>length 轮廓与边框边缘的距离。</li><li>inherit 规定应从父元素继承 outline-offset 属性的值。</li></ul></li></ul><h5 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h5><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	resize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	box-sizing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">border-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	outline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	outline-offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,5),n=[e];function h(p,d,o,k,r,c){return a(),s("div",null,n)}const _=i(l,[["render",h]]);export{g as __pageData,_ as default};
