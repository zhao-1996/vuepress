import{_ as e,c as a,o as t,a3 as r}from"./chunks/framework.BvVpiGod.js";const u=JSON.parse('{"title":"渲染选项","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue3/选项式API/4.渲染选项.md","filePath":"vue/vue3/选项式API/4.渲染选项.md","lastUpdated":1717055774000}'),o={name:"vue/vue3/选项式API/4.渲染选项.md"},n=r('<h1 id="渲染选项" tabindex="-1">渲染选项 <a class="header-anchor" href="#渲染选项" aria-label="Permalink to &quot;渲染选项&quot;">​</a></h1><h4 id="template" tabindex="-1">template <a class="header-anchor" href="#template" aria-label="Permalink to &quot;template&quot;">​</a></h4><p>用于声明组件的字符串模板。</p><h4 id="render" tabindex="-1">render <a class="header-anchor" href="#render" aria-label="Permalink to &quot;render&quot;">​</a></h4><p>用于编程式地创建组件虚拟 DOM 树的函数。<br> render 是字符串模板的一种替代，可以使你利用 JavaScript 的丰富表达力来完全编程式地声明组件最终的渲染输出。<br></p><p>预编译的模板，例如单文件组件中的模板，会在构建时被编译为 render 选项。如果一个组件中同时存在 render 和 template，则 render 将具有更高的优先级。<br></p><h4 id="compileroptions" tabindex="-1">compilerOptions <a class="header-anchor" href="#compileroptions" aria-label="Permalink to &quot;compilerOptions&quot;">​</a></h4><p>用于配置组件模板的运行时编译器选项。<br> 这个配置选项仅在使用完整构建版本 (即可以在浏览器中编译模板的 vue.js 文件) 时才有效</p>',8),i=[n];function d(l,s,p,_,c,h){return t(),a("div",null,i)}const b=e(o,[["render",d]]);export{u as __pageData,b as default};
