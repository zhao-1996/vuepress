import{_ as t,c as a,o as s,a3 as e}from"./chunks/framework.BvVpiGod.js";const b=JSON.parse('{"title":"文本换行","description":"","frontmatter":{},"headers":[],"relativePath":"css/css技巧/3.文本换行.md","filePath":"css/css技巧/3.文本换行.md","lastUpdated":1658193809000}'),i={name:"css/css技巧/3.文本换行.md"},d=e(`<h1 id="文本换行" tabindex="-1">文本换行 <a class="header-anchor" href="#文本换行" aria-label="Permalink to &quot;文本换行&quot;">​</a></h1><h4 id="white-space-中文换行" tabindex="-1">white-space 中文换行 <a class="header-anchor" href="#white-space-中文换行" aria-label="Permalink to &quot;white-space 中文换行&quot;">​</a></h4><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认。空白会被浏览器忽略。</td></tr><tr><td>pre</td><td>空白会被浏览器保留。其行为方式类似 HTML 中的 <code>&lt;pre&gt;</code> 标签。</td></tr><tr><td>nowrap</td><td>文本不会换行，文本会在在同一行上继续，直到遇到 <code>&lt;br&gt;</code> 标签为止。</td></tr><tr><td>pre-wrap</td><td>保留空白符序列，但是正常地进行换行。</td></tr><tr><td>pre-line</td><td>合并空白符序列，但是保留换行符。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 white-space 属性的值。</td></tr></tbody></table><h4 id="word-break-英文换行" tabindex="-1">word-break 英文换行 <a class="header-anchor" href="#word-break-英文换行" aria-label="Permalink to &quot;word-break 英文换行&quot;">​</a></h4><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>使用浏览器默认的换行规则。</td></tr><tr><td>break-all</td><td>允许在单词内换行。</td></tr><tr><td>keep-all</td><td>只能在半角空格或连字符处换行。                                                                     </td></tr></tbody></table><h4 id="回车换行符" tabindex="-1"><code>回车换行符</code> <a class="header-anchor" href="#回车换行符" aria-label="Permalink to &quot;\`回车换行符\`&quot;">​</a></h4><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    white-space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pre-wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	word-break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">break-all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,7),r=[d];function h(l,n,p,o,c,k){return s(),a("div",null,r)}const E=t(i,[["render",h]]);export{b as __pageData,E as default};
