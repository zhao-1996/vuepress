import{_ as s,c as a,o,j as e,a as t}from"./chunks/framework.BvVpiGod.js";const n="/vuepress/assets/qiantao1.DX8lZXT5.webp",r="/vuepress/assets/qiantao2.DyZYbX6V.webp",B=JSON.parse('{"title":"嵌套结构","description":"","frontmatter":{},"headers":[],"relativePath":"tool/依赖管理/1.嵌套结构.md","filePath":"tool/依赖管理/1.嵌套结构.md","lastUpdated":1716962640000}'),_={name:"tool/依赖管理/1.嵌套结构.md"},c=e("h1",{id:"嵌套结构",tabindex:"-1"},[t("嵌套结构 "),e("a",{class:"header-anchor",href:"#嵌套结构","aria-label":'Permalink to "嵌套结构"'},"​")],-1),l=e("p",null,[t("npm 的早期版本"),e("br"),t(" 执行 npm install 后，得到的 node_modules 中模块目录结构就是下面这样的： "),e("img",{src:n,alt:"RUNOOB 图标"}),t(" 这样的方式优点很明显， node_modules 的结构和 package.json 结构一一对应，层级结构明显，并且保证了每次安装目录结构都是相同的"),e("br"),t(" 缺点也很明显如果你依赖的模块非常之多，你的 node_modules 将非常庞大，嵌套层级非常之深： "),e("img",{src:r,alt:"RUNOOB 图标"})],-1),d=[c,l];function i(p,m,h,u,f,b){return o(),a("div",null,d)}const N=s(_,[["render",i]]);export{B as __pageData,N as default};
