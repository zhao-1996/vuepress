import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.aC9gkKXW.js";const u=JSON.parse('{"title":"本地与远程仓库交互","description":"","frontmatter":{},"headers":[],"relativePath":"tool/git/4.本地与远程仓库交互.md","filePath":"tool/git/4.本地与远程仓库交互.md","lastUpdated":1716973501000}'),t={name:"tool/git/4.本地与远程仓库交互.md"},e=n(`<h1 id="本地与远程仓库交互" tabindex="-1">本地与远程仓库交互 <a class="header-anchor" href="#本地与远程仓库交互" aria-label="Permalink to &quot;本地与远程仓库交互&quot;">​</a></h1><p>要通过 Git 与其他开发者合作，你需要将数据放到一台其他开发者能够连接的服务器上。 <br> Git 实现此流程的方式是将你的数据与另一个仓库同步。 <br> 在服务器与客户端之间并没有实质的区别 —— Git 仓库就是 Git 仓库，你可以很容易地在两者之间同步。</p><h3 id="查看远程仓库" tabindex="-1">查看远程仓库 <a class="header-anchor" href="#查看远程仓库" aria-label="Permalink to &quot;查看远程仓库&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">origin	git@github.com:github/git-reference.git (fetch)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">origin	git@github.com:github/git-reference.git (push)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">在此你看到了该链接两次，是因为 Git 允许你为每个远端仓库添加不同</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">的推送与获取的链接，以备你读写时希望使用不同的协议。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre></div><h3 id="添加远程仓库" tabindex="-1">添加远程仓库 <a class="header-anchor" href="#添加远程仓库" aria-label="Permalink to &quot;添加远程仓库&quot;">​</a></h3><p>git remote add 仓库名 仓库地址</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote add origin git@github.com:schacon</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hw.git</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote add github git@github.com:github</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reference.git</span></span></code></pre></div><h3 id="删除远程仓库" tabindex="-1">删除远程仓库 <a class="header-anchor" href="#删除远程仓库" aria-label="Permalink to &quot;删除远程仓库&quot;">​</a></h3><p>git remote rm 仓库名</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote rm origin </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git remote rm github</span></span></code></pre></div><h3 id="获取远程仓库数据" tabindex="-1">获取远程仓库数据 <a class="header-anchor" href="#获取远程仓库数据" aria-label="Permalink to &quot;获取远程仓库数据&quot;">​</a></h3><p>git fetch 仓库名 （获取远程仓库所有数据到本地仓库）</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取别名为origin的仓库的所有数据到本地仓库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git fetch origin</span></span></code></pre></div><p>git fetch 仓库名 分支名（获取远程仓库指定分支数据）</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git fetch origin ProdBranch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">执行之后会出现</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * branch            zhao     -&gt; FETCH_HEAD</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">获取别名为origin的仓库的zhao分支的数据到本地仓库</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">git merge origin/zhao(这的origin代表本地仓库)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">将本地仓库更新后的代码合并到工作区的当前分支</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre></div><p>git pull 仓库名 (获取远程仓库的所有数据并合并到本地工作区当前分支)</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git pull origin</span></span></code></pre></div><p>git pull 仓库名 远程分支:本地分支 (获取远程仓库指定分支数据并合并到本地工作区指定分支)</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git pull origin </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProdBranch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:DevBranch</span></span></code></pre></div><h3 id="推送数据到远程仓库" tabindex="-1">推送数据到远程仓库 <a class="header-anchor" href="#推送数据到远程仓库" aria-label="Permalink to &quot;推送数据到远程仓库&quot;">​</a></h3><p>git push 仓库名 本地分支:远程分支 （推送本地仓库指定分支数据大远程仓库指定分支）</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">如果你和另一个开发者同时克隆了，又都有提交，那么当她推送后你也想推送时，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">默认情况下 Git 不会让你覆盖她的改动。 相反的，它会在你试图推送的分支上</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">执行 git log，确定它能够在你的推送分支的历史记录中看到服务器分支的当前</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">进度。 如果它在在你的历史记录中看不到，它就会下结论说你过时了，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">并打回你的推送。 你需要正式提取、合并，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">然后再次推送,以确定你把她的改动也考虑在内了。.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">当你试图推送到某个已被更新的远端分支时，会出现下面这种情况：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">$ git push origin DevBranch:ProdBranch</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">To git@github.com:schacon/hw.git</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> ! [rejected]        master -&gt; master (non-fast-forward)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">error: failed to push some refs to &#39;git@github.com:schacon/hw.git&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">To prevent you from losing history, non-fast-forward updates were rejected</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Merge the remote changes before pushing again.  See the &#39;Note about</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">fast-forwards&#39; section of &#39;git push --help&#39; for details.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push origin </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DevBranch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:ProdBranch</span></span></code></pre></div>`,22),p=[e];function l(h,r,k,c,o,d){return a(),i("div",null,p)}const y=s(t,[["render",l]]);export{u as __pageData,y as default};
