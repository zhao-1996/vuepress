import{_ as i,c as a,o as t,a3 as s}from"./chunks/framework.aC9gkKXW.js";const u=JSON.parse('{"title":"表单事件","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/event/7.表单事件.md","filePath":"javascript/event/7.表单事件.md","lastUpdated":1716973501000}'),e={name:"javascript/event/7.表单事件.md"},n=s(`<h1 id="表单事件" tabindex="-1">表单事件 <a class="header-anchor" href="#表单事件" aria-label="Permalink to &quot;表单事件&quot;">​</a></h1><h3 id="表单事件的种类" tabindex="-1">表单事件的种类 <a class="header-anchor" href="#表单事件的种类" aria-label="Permalink to &quot;表单事件的种类&quot;">​</a></h3><h4 id="input-事件" tabindex="-1">input 事件 <a class="header-anchor" href="#input-事件" aria-label="Permalink to &quot;input 事件&quot;">​</a></h4><p><code>input事件当&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;的值发生变化时触发。对于复选框（&lt;input type=checkbox&gt;）或单选框（&lt;input type=radio&gt;），用户改变选项时，也会触发这个事件。另外，对于打开contenteditable属性的元素，只要值发生变化，也会触发input事件。 input事件的一个特点，就是会连续触发，比如用户每按下一次按键，就会触发一次input事件。 input事件对象继承了InputEvent接口。 该事件跟change事件很像，不同之处在于input事件在元素的值发生变化后立即发生，而change在元素失去焦点时发生，而内容此时可能已经变化多次。也就是说，如果有连续变化，input事件会触发多次，而change事件只在失去焦点时触发一次</code></p><h4 id="select-事件" tabindex="-1">select 事件 <a class="header-anchor" href="#select-事件" aria-label="Permalink to &quot;select 事件&quot;">​</a></h4><p><code>select事件当在&lt;input&gt;、&lt;textarea&gt;里面选中文本时触发</code></p><h4 id="change-事件" tabindex="-1">change 事件 <a class="header-anchor" href="#change-事件" aria-label="Permalink to &quot;change 事件&quot;">​</a></h4><p><code>change事件当&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;的值发生变化时触发。它与input事件的最大不同，就是不会连续触发，只有当全部修改完成时才会触发，另一方面input事件必然伴随change事件。具体来说，分成以下几种情况。</code></p><ul><li><code>激活单选框（radio）或复选框（checkbox）时触发。</code></li><li><code>用户提交时触发。比如，从下列列表（select）完成选择，在日期或文件输入框完成选择。</code></li><li><code>当文本框或&lt;textarea&gt;元素的值发生改变，并且丧失焦点时触发。</code></li></ul><h4 id="invalid-事件" tabindex="-1">invalid 事件 <a class="header-anchor" href="#invalid-事件" aria-label="Permalink to &quot;invalid 事件&quot;">​</a></h4><p><code>用户提交表单时，如果表单元素的值不满足校验条件，就会触发invalid事件。</code></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> required</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> oninvalid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(&#39;invalid input&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;提交&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>上面代码中，输入框是必填的。如果不填，用户点击按钮提交时，就会触发输入框的invalid事件，导致提交被取消。</code></p><h4 id="reset-事件-submit-事件" tabindex="-1">reset 事件，submit 事件 <a class="header-anchor" href="#reset-事件-submit-事件" aria-label="Permalink to &quot;reset 事件，submit 事件&quot;">​</a></h4><p><code>这两个事件发生在表单对象&lt;form&gt;上，而不是发生在表单的成员上。 reset事件当表单重置（所有表单成员变回默认值）时触发。 submit事件当表单数据向服务器提交时触发。注意，submit事件的发生对象是&lt;form&gt;元素，而不是&lt;button&gt;元素，因为提交的是表单，而不是按钮。</code></p><h3 id="inputevent-接口" tabindex="-1">InputEvent 接口 <a class="header-anchor" href="#inputevent-接口" aria-label="Permalink to &quot;InputEvent 接口&quot;">​</a></h3><p><code>InputEvent接口主要用来描述input事件的实例。该接口继承了Event接口，还定义了一些自己的实例属性和实例方法。</code><br><code>浏览器原生提供InputEvent()构造函数，用来生成实例对象。</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InputEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, options)</span></span></code></pre></div><p><code>InputEvent构造函数可以接受两个参数。第一个参数是字符串，表示事件名称，该参数是必需的。第二个参数是一个配置对象，用来设置事件实例的属性，该参数是可选的。配置对象的字段除了Event构造函数的配置属性，还可以设置下面的字段，这些字段都是可选的。</code></p><ul><li><code>inputType：字符串，表示发生变更的类型（详见下文）。</code></li><li><code>data：字符串，表示插入的字符串。如果没有插入的字符串（比如删除操作），则返回null或空字符串。</code></li><li><code>dataTransfer：返回一个 DataTransfer 对象实例，该属性通常只在输入框接受富文本输入时有效。</code><br><code>InputEvent的实例属性主要就是上面三个属性，这三个实例属性都是只读的。</code></li></ul><h4 id="inputevent-data" tabindex="-1">InputEvent.data <a class="header-anchor" href="#inputevent-data" aria-label="Permalink to &quot;InputEvent.data&quot;">​</a></h4><p><code>InputEvent.data属性返回一个字符串，表示变动的内容。</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;input type=&quot;text&quot; id=&quot;myInput&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myInput&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myFunction, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>上面代码中，如果手动在输入框里面输入abc，控制台会先输出a，再在下一行输出b，再在下一行输出c。然后选中abc，一次性将它们删除，控制台会输出null或一个空字符串。</code></p><h4 id="inputevent-inputtype" tabindex="-1">InputEvent.inputType <a class="header-anchor" href="#inputevent-inputtype" aria-label="Permalink to &quot;InputEvent.inputType&quot;">​</a></h4><p><code>InputEvent.inputType属性返回一个字符串，表示字符串发生变更的类型。 对于常见情况，Chrome 浏览器的返回值如下。完整列表可以参考</code><a href="https://w3c.github.io/input-events/index.html#dom-inputevent-inputtype" target="_blank" rel="noreferrer">文档</a></p><ul><li><code>手动插入文本：insertText</code></li><li><code>粘贴插入文本：insertFromPaste</code></li><li><code>向后删除：deleteContentBackward</code></li><li><code>向前删除：deleteContentForward</code></li></ul><h4 id="inputevent-datatransfer" tabindex="-1">InputEvent.dataTransfer <a class="header-anchor" href="#inputevent-datatransfer" aria-label="Permalink to &quot;InputEvent.dataTransfer&quot;">​</a></h4><p><code>InputEvent.dataTransfer属性返回一个 DataTransfer 实例。该属性只在文本框接受粘贴内容（insertFromPaste）或拖拽内容（insertFromDrop）时才有效。</code></p>`,29),l=[n];function p(h,d,r,k,o,c){return t(),a("div",null,l)}const g=i(e,[["render",p]]);export{u as __pageData,g as default};
