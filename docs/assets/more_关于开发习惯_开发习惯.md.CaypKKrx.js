import{_ as a,c as e,o as t,a3 as r}from"./chunks/framework.aC9gkKXW.js";const _=JSON.parse('{"title":"开发习惯","description":"","frontmatter":{},"headers":[],"relativePath":"more/关于开发习惯/开发习惯.md","filePath":"more/关于开发习惯/开发习惯.md","lastUpdated":1680157061000}'),s={name:"more/关于开发习惯/开发习惯.md"},i=r('<h1 id="开发习惯" tabindex="-1">开发习惯 <a class="header-anchor" href="#开发习惯" aria-label="Permalink to &quot;开发习惯&quot;">​</a></h1><p>好的开发习惯，往往能让你心平气和的阅读自己的陈年代码</p><h3 id="关于css" tabindex="-1">关于css <a class="header-anchor" href="#关于css" aria-label="Permalink to &quot;关于css&quot;">​</a></h3><p>1.组件css应放在组件最高父节点class对象里，以免受到公共样式污染<br> 2.最高父组件css起名应见名知意，避免与组件内其他class命名重复<br> 3.建议每个功能模块的css单独存放在scss/less文件中</p><h3 id="关于html" tabindex="-1">关于HTML <a class="header-anchor" href="#关于html" aria-label="Permalink to &quot;关于HTML&quot;">​</a></h3><p>1.去掉多余HTML标签<br> 2.简单功能，可以不使用组件库标签则不使用组件库标签，组件库标签性能通常存在诸多判断逻辑及与业务逻辑不符的多余标签<br> 3.标签内样式尽量使用class替代，复杂逻辑变量样式使用单例方法代替，方便阅读及扩展<br></p><h3 id="关于javascript" tabindex="-1">关于JavaScript <a class="header-anchor" href="#关于javascript" aria-label="Permalink to &quot;关于JavaScript&quot;">​</a></h3><p>1.功能复杂的组件，通常需要将逻辑拆分到独立的js/ts文件，此时拆分的逻辑应该尽量使用单例模式(一个函数只做一件事)，保证代码可阅读性，及主文件(.vue)只关注业务流程，不关注对数据的包装处理<br> 2.方法名称应见名知意以及注释清楚该单例函数的主要功能<br> 3.单例方法调用时传入this（vue中，只有选项式API才有this及相关操作），即可获得当前组件实例，此时可以分离大部分臃肿冗余但必须的判断逻辑(如数据结构修正或数据数据补全)，后台脏数据，大部分是历史原因，难以避免</p><h3 id="关于git版本管理" tabindex="-1">关于Git版本管理 <a class="header-anchor" href="#关于git版本管理" aria-label="Permalink to &quot;关于Git版本管理&quot;">​</a></h3><p>1.建议使用git fetch ,git merge 来合并远程分支的代码，git fetch可以知道远程代码仓库发生了什么，此时使用git merge精准合并<br> 2.开发人员只关注本次开发分支和master分支，无需关注其他版本分支（合并主分支回归后应尽量避免其他版本上线）</p><h3 id="关于组件" tabindex="-1">关于组件 <a class="header-anchor" href="#关于组件" aria-label="Permalink to &quot;关于组件&quot;">​</a></h3><p>1.子组件应不应放在父组件最高层级节点内，避免父组件使用::v-deep/::v-deep() 深度样式语法糖时污染子组件样式。<br> 2.子组件起名字应见名知意,引入子组件的父组件应注释清楚该组件的主要功能<br> 3.子组件的逻辑应尽量放在子组件处理，父组件的职能应只是唤醒子组件及提供必要参数（vue3中应将唤醒逻辑抽离，以提供父子组件同时引入）<br></p><h3 id="关于公共组件" tabindex="-1">关于公共组件 <a class="header-anchor" href="#关于公共组件" aria-label="Permalink to &quot;关于公共组件&quot;">​</a></h3><p>1.应尽量避免创建和使用公共组件，公共组件要满足大部分需求，必然存在诸多相对于只需部分功能需求的组件的冗余逻辑，也不方便扩展<br> 2.公共组件应与公共数据一样，功能模块只是使用，而不涉及逻辑处理。</p><h3 id="关于公共方法" tabindex="-1">关于公共方法 <a class="header-anchor" href="#关于公共方法" aria-label="Permalink to &quot;关于公共方法&quot;">​</a></h3><p>1.公共方法应尽量将可配置参数设置成可配置，而不是写死<br> 2.公共方法的配置参数应是一个对象，而不是拆分为多个基础数据类型参数</p><h3 id="关于公共css" tabindex="-1">关于公共CSS <a class="header-anchor" href="#关于公共css" aria-label="Permalink to &quot;关于公共CSS&quot;">​</a></h3><p>1.公共css应只涉及基础功能，如ul,li list-style:none;,如布局各个版块的主题样式<br> 2.公共css应尽量避免使用 <code>!important</code>属性<br> 3.如涉及功能模块样式则应在该功能模块最高节点class内编辑</p><h3 id="关于公共数据" tabindex="-1">关于公共数据 <a class="header-anchor" href="#关于公共数据" aria-label="Permalink to &quot;关于公共数据&quot;">​</a></h3><p>1.公共数据应只是使用的，而不涉及逻辑处理(只在初始化时做一次逻辑处理)<br> 2.建议公共数据应存放在 vuex/pinia getters属性中集中管理，处理逻辑则放在各个状态管理模块/文件 内<br> 3.复杂联动组件的数据建议使用vue3进行开发，在vue3中将数据使用reactive()集中管理，将数据处理逻辑抽离到单独的js/ts文件中，主文件(.vue)只关注业务流程</p><h3 id="关于公共请求方法" tabindex="-1">关于公共请求方法 <a class="header-anchor" href="#关于公共请求方法" aria-label="Permalink to &quot;关于公共请求方法&quot;">​</a></h3>',21),o=[i];function h(c,l,n,d,p,b){return t(),e("div",null,o)}const m=a(s,[["render",h]]);export{_ as __pageData,m as default};
