import{_ as a,c as s,o as i,a3 as n}from"./chunks/framework.aC9gkKXW.js";const E=JSON.parse('{"title":"null、undefined、Boolean","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/JavaScript基础/5.null、undefined、Boolean.md","filePath":"javascript/JavaScript基础/5.null、undefined、Boolean.md","lastUpdated":1716973501000}'),e={name:"javascript/JavaScript基础/5.null、undefined、Boolean.md"},l=n(`<h1 id="null、undefined、boolean" tabindex="-1">null、undefined、Boolean <a class="header-anchor" href="#null、undefined、boolean" aria-label="Permalink to &quot;null、undefined、Boolean&quot;">​</a></h1><h3 id="null-和-undefined" tabindex="-1">null 和 undefined<br> <a class="header-anchor" href="#null-和-undefined" aria-label="Permalink to &quot;null 和 undefined&lt;br/&gt;&quot;">​</a></h3><p>null与undefined都可以表示“没有”，含义非常相似。将一个变量赋值为undefined或null，老实说，语法效果几乎没区别。 if语句中，它们都会被自动转为false，相等运算符（==）甚至直接报告两者相等。<br> null是一个表示“空”的对象，转为数值时为0；undefined是一个表示&quot;此处无定义&quot;的原始值，转为数值时为NaN。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NaN</span></span></code></pre></div><h3 id="boolean" tabindex="-1">Boolean<br> <a class="header-anchor" href="#boolean" aria-label="Permalink to &quot;Boolean&lt;br/&gt;&quot;">​</a></h3><p>布尔值代表“真”和“假”两个状态。“真”用关键字true表示，“假”用关键字false表示。布尔值只有这两个值。<br> 下列运算符会返回布尔值：<br> 前置逻辑运算符： ! (Not)<br> 相等运算符：===，!==，==，!=<br> 比较运算符：&gt;，&gt;=，&lt;，&lt;=<br> 如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为false，其他值都视为true。<br> undefined<br> null<br> false<br> 0<br> NaN<br> &quot;&quot; 或 &#39;&#39;（空字符串）<br></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;true&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 没有任何输出</span></span></code></pre></div>`,7),t=[l];function d(p,h,r,o,k,u){return i(),s("div",null,t)}const b=a(e,[["render",d]]);export{E as __pageData,b as default};
