import{_ as e,c as a,o as i,a3 as t}from"./chunks/framework.aC9gkKXW.js";const E=JSON.parse('{"title":"键盘事件","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/event/5.键盘事件.md","filePath":"javascript/event/5.键盘事件.md","lastUpdated":1716973501000}'),o={name:"javascript/event/5.键盘事件.md"},d=t(`<h1 id="键盘事件" tabindex="-1">键盘事件 <a class="header-anchor" href="#键盘事件" aria-label="Permalink to &quot;键盘事件&quot;">​</a></h1><p><code>键盘事件由用户击打键盘触发，主要有keydown、keypress、keyup三个事件，它们都继承了KeyboardEvent接口。</code></p><ul><li><code>keydown：按下键盘时触发。</code></li><li><code>keypress：按下有值的键时触发，即按下 Ctrl、Alt、Shift、Meta 这样无值的键，这个事件不会触发。对于有值的键，按下时先触发keydown事件，再触发这个事件。</code></li><li><code>keyup：松开键盘时触发该事件。</code><br></li></ul><p><code>如果用户一直按键不松开，就会连续触发键盘事件，触发的顺序如下。</code></p><ul><li><code>1.keydown</code></li><li><code>2.keypress</code></li><li><code>3.keydown</code></li><li><code>4.keypress</code></li><li><code>5....（重复以上过程）</code></li><li><code>6.keyup</code><br></li></ul><p><code>KeyboardEvent接口用来描述用户与键盘的互动。这个接口继承了Event接口，并且定义了自己的实例属性和实例方法。</code><br><code>浏览器原生提供KeyboardEvent构造函数，用来新建键盘事件的实例。</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KeyboardEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, options)</span></span></code></pre></div><p><code>KeyboardEvent构造函数接受两个参数。第一个参数是字符串，表示事件类型；第二个参数是一个事件配置对象，该参数可选。除了Event接口提供的属性，还可以配置以下字段，它们都是可选。</code></p><ul><li><code>key：字符串，当前按下的键，默认为空字符串。</code></li><li><code>code：字符串，表示当前按下的键的字符串形式，默认为空字符串。</code></li><li><code>location：整数，当前按下的键的位置，默认为0。</code></li><li><code>ctrlKey：布尔值，是否按下 Ctrl 键，默认为false。</code></li><li><code>shiftKey：布尔值，是否按下 Shift 键，默认为false。</code></li><li><code>altKey：布尔值，是否按下 Alt 键，默认为false。</code></li><li><code>metaKey：布尔值，是否按下 Meta 键，默认为false。</code></li><li><code>repeat：布尔值，是否重复按键，默认为false。</code></li></ul><h3 id="keyboardevent-的实例属性" tabindex="-1">KeyboardEvent 的实例属性 <a class="header-anchor" href="#keyboardevent-的实例属性" aria-label="Permalink to &quot;KeyboardEvent 的实例属性&quot;">​</a></h3><h4 id="keyboardevent-altkey-keyboardevent-ctrlkey-keyboardevent-metakey-keyboardevent-shiftkey" tabindex="-1">KeyboardEvent.altKey，KeyboardEvent.ctrlKey，KeyboardEvent.metaKey，KeyboardEvent.shiftKey <a class="header-anchor" href="#keyboardevent-altkey-keyboardevent-ctrlkey-keyboardevent-metakey-keyboardevent-shiftkey" aria-label="Permalink to &quot;KeyboardEvent.altKey，KeyboardEvent.ctrlKey，KeyboardEvent.metaKey，KeyboardEvent.shiftKey&quot;">​</a></h4><p><code>以下属性都是只读属性，返回一个布尔值，表示是否按下对应的键。</code></p><ul><li><code>KeyboardEvent.altKey：是否按下 Alt 键</code></li><li><code>KeyboardEvent.ctrlKey：是否按下 Ctrl 键</code></li><li><code>KeyboardEvent.metaKey：是否按下 meta 键（Mac 系统是一个四瓣的小花，Windows 系统是 windows 键）</code></li><li><code>KeyboardEvent.shiftKey：是否按下 Shift 键</code></li></ul><h4 id="keyboardevent-code" tabindex="-1">KeyboardEvent.code <a class="header-anchor" href="#keyboardevent-code" aria-label="Permalink to &quot;KeyboardEvent.code&quot;">​</a></h4><p><code>KeyboardEvent.code属性返回一个字符串，表示当前按下的键的字符串形式。该属性只读。</code><br><code>下面是一些常用键的字符串形式，其他键请查</code><a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values" target="_blank" rel="noreferrer">文档</a></p><ul><li><code>数字键0 - 9：返回digit0 - digit9</code></li><li><code>字母键A - z：返回KeyA - KeyZ</code></li><li><code>功能键F1 - F12：返回 F1 - F12</code></li><li><code>方向键：返回ArrowDown、ArrowUp、ArrowLeft、ArrowRight</code></li><li><code>Alt 键：返回AltLeft或AltRight</code></li><li><code>Shift 键：返回ShiftLeft或ShiftRight</code></li><li><code>Ctrl 键：返回ControlLeft或ControlRight</code></li></ul><h4 id="keyboardevent-key" tabindex="-1">KeyboardEvent.key <a class="header-anchor" href="#keyboardevent-key" aria-label="Permalink to &quot;KeyboardEvent.key&quot;">​</a></h4><p><code>KeyboardEvent.key属性返回一个字符串，表示按下的键名。该属性只读。</code><br><code>如果按下的键代表可打印字符，则返回这个字符，比如数字、字母。</code><br><code>如果按下的键代表不可打印的特殊字符，则返回预定义的键值，比如 Backspace，Tab，Enter，Shift，Control，Alt，CapsLock，Esc，Spacebar，PageUp，PageDown，End，Home，Left，Right，Up，Down，PrintScreen，Insert，Del，Win，F1～F12，NumLock，Scroll 等。</code><br><code>如果同时按下一个控制键和一个符号键，则返回符号键的键名。比如，按下 Ctrl + a，则返回a；按下 Shift + a，则返回大写的A。</code><br><code>如果无法识别键名，返回字符串Unidentified。</code></p><h4 id="keyboardevent-location" tabindex="-1">KeyboardEvent.location <a class="header-anchor" href="#keyboardevent-location" aria-label="Permalink to &quot;KeyboardEvent.location&quot;">​</a></h4><p><code>KeyboardEvent.location属性返回一个整数，表示按下的键处在键盘的哪一个区域。它可能取以下值。</code></p><ul><li><code>0：处在键盘的主区域，或者无法判断处于哪一个区域。</code></li><li><code>1：处在键盘的左侧，只适用那些有两个位置的键（比如 Ctrl 和 Shift 键）。</code></li><li><code>2：处在键盘的右侧，只适用那些有两个位置的键（比如 Ctrl 和 Shift 键）。</code></li><li><code>3：处在数字小键盘。</code></li></ul><h4 id="keyboardevent-repeat" tabindex="-1">KeyboardEvent.repeat <a class="header-anchor" href="#keyboardevent-repeat" aria-label="Permalink to &quot;KeyboardEvent.repeat&quot;">​</a></h4><p><code>KeyboardEvent.repeat返回一个布尔值，代表该键是否被按着不放，以便判断是否重复这个键，即浏览器会持续触发keydown和keypress事件，直到用户松开手为止。</code></p><h3 id="keyboardevent-的实例方法" tabindex="-1">KeyboardEvent 的实例方法 <a class="header-anchor" href="#keyboardevent-的实例方法" aria-label="Permalink to &quot;KeyboardEvent 的实例方法&quot;">​</a></h3><h4 id="keyboardevent-getmodifierstate" tabindex="-1">KeyboardEvent.getModifierState() <a class="header-anchor" href="#keyboardevent-getmodifierstate" aria-label="Permalink to &quot;KeyboardEvent.getModifierState()&quot;">​</a></h4><p><code>KeyboardEvent.getModifierState()方法返回一个布尔值，表示是否按下或激活指定的功能键。它的常用参数如下。</code></p><ul><li><code>Alt：Alt 键</code></li><li><code>CapsLock：大写锁定键</code></li><li><code>Control：Ctrl 键</code></li><li><code>Meta：Meta 键</code></li><li><code>NumLock：数字键盘开关键</code></li><li><code>Shift：Shift 键</code></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getModifierState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Control&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getModifierState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getModifierState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Meta&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>上面代码表示，只要Control、Alt、Meta里面，同时按下任意两个或两个以上的键就返回。</code></p>`,29),l=[d];function s(n,r,c,h,k,p){return i(),a("div",null,l)}const b=e(o,[["render",s]]);export{E as __pageData,b as default};
