import{_ as e,c as o,o as a,a3 as r}from"./chunks/framework.aC9gkKXW.js";const m=JSON.parse('{"title":"前端复杂表单","description":"","frontmatter":{},"headers":[],"relativePath":"more/关于业务/1.前端复杂表单.md","filePath":"more/关于业务/1.前端复杂表单.md","lastUpdated":1648390811000}'),c={name:"more/关于业务/1.前端复杂表单.md"},d=r('<h1 id="前端复杂表单" tabindex="-1">前端复杂表单 <a class="header-anchor" href="#前端复杂表单" aria-label="Permalink to &quot;前端复杂表单&quot;">​</a></h1><h3 id="业务场景" tabindex="-1">业务场景 <a class="header-anchor" href="#业务场景" aria-label="Permalink to &quot;业务场景&quot;">​</a></h3><ul><li><code>1.生成一个产品，需要填写十个表单，</code></li><li><code>2.每个表单之间需要填写大量数据</code></li><li><code>3.表单内部数据存在大量联动</code></li><li><code>4.表单与表单之间存在大量联动</code></li><li><code>5.服务器数据存在大量脏数据</code></li><li><code>6.服务器数据存在多状态数据</code></li></ul><p><strong>接到这样的需求</strong><br> 首先<br> 恭喜你，接下来的日子，你将会很痛苦，因为大量的表单需要验证。<br> 其次<br> 恭喜你，接下来的日子，你将会很痛苦，因为大量的逻辑代码随着需求需要复盘修改。<br> 最后<br> 恭喜你，接下来的日子，你将会很痛苦，因为大量的逻辑代码随着测试反馈需要复盘完善。<br> 什么是复盘，@】/】。】【【⛷……🌂%🏇4🦑￥💩#🐄#☠&amp;*😭（口吐芬芳）</p><h3 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h3><p><code>1.以组件化方式开发，以方便组件持续扩展，代码可阅读</code><br><code>2.将数据集中到顶层，以方便组件与组件的交互内容持续扩展（方案有store，reacttive）</code><br><code>3.每个组件只负责自身组件所需的简单逻辑代码（如校验正则），其他逻辑代码封装到统一文件，一边后续持续扩展时直观阅读业务逻辑代码</code><br><code>4.业务模块所需接口封装到统一文件且中文注释一定要写，以便后续持续扩展时可以阅读接口功能</code><br><code>5.做好做宽顶层架构，因为刚开始业务逻辑可能是简单的，但持续扩展就不是简单的加构能满足需求的了</code></p><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><p><code>1.功能复杂的业务模块一定要自己封装，不要使用第三方库，例如步骤条,复杂表单验证。以便后续轻松持续扩展。</code><br><code>2.对数据深层嵌套数据，一定要进行层层判空，防止后台传输数据结构不满足要求，导致代码错误</code><br><code>3.凡事写详细注释，并不差那点时间，否则如果是复杂业务逻辑，后面记忆模糊了又要问后端😂</code></p>',8),t=[d];function i(l,_,s,n,h,b){return a(),o("div",null,t)}const u=e(c,[["render",i]]);export{m as __pageData,u as default};
