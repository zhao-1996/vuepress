import{_ as a,D as c,c as d,j as e,I as t,a3 as l,o as n}from"./chunks/framework.aC9gkKXW.js";const A=JSON.parse('{"title":"概述","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/dom/1.概述.md","filePath":"javascript/dom/1.概述.md","lastUpdated":1637589861000}'),i={name:"javascript/dom/1.概述.md"},s=l("",4),_=e("code",null,"DOM 的最小组成单位叫做节点（node）。文档的树形结构（DOM 树），就是由各种不同类型的节点组成。每个节点可以看作是文档树的一片叶子。",-1),r=e("code",null,"节点的类型有七种。",-1),u=l("",2),h=e("code",null,"一个文档的所有节点，按照所在的层级，可以抽象成一种树状结构。这种树状结构就是 DOM 树。它有一个顶层节点，下一层都是顶层节点的子节点，然后子节点又有自己的子节点，就这样层层衍生出一个金字塔结构，又像一棵树。",-1),p=e("code",null,"浏览器原生提供document节点，代表整个文档。",-1),m=e("br",null,null,-1),D=e("code",null,"文档的第一层有两个节点，第一个是文档类型节点（<!doctype html>），第二个是 HTML 网页的顶层容器标签<html>。后者构成了树结构的根节点（root node），其他 HTML 标签节点都是它的下级节点。",-1),M=e("br",null,null,-1),T=e("code",null,"除了根节点，其他节点都有三种层级关系。",-1),b=e("br",null,null,-1),O=e("ul",null,[e("li",null,[e("code",null,"父节点关系（parentNode）：直接的那个上级节点")]),e("li",null,[e("code",null,"子节点关系（childNodes）：直接的下级节点")]),e("li",null,[e("code",null,"同级节点关系（sibling）：拥有同一个父节点的节点"),e("br")])],-1),S=e("p",null,[e("code",null,"DOM 提供操作接口，用来获取这三种关系的节点。比如，子节点接口包括firstChild（第一个子节点）和lastChild（最后一个子节点）等属性，同级节点接口包括nextSibling（紧邻在后的那个同级节点）和previousSibling（紧邻在前的那个同级节点）属性。")],-1);function f(v,P,q,N,g,x){const o=c("BR");return n(),d("div",null,[s,e("p",null,[_,t(o),r,t(o)]),u,e("p",null,[h,t(o),p,m,D,M,T,b]),O,S])}const J=a(i,[["render",f]]);export{A as __pageData,J as default};
